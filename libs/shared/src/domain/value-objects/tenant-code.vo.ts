/**
 * @file tenant-code.vo.ts
 * @description 租户代码值对象
 *
 * 该值对象封装租户代码的业务规则和验证逻辑。
 * 租户代码具有全局唯一性，用于系统内部标识。
 *
 * 通用性说明：
 * 1. 跨领域使用：所有需要租户标识的模块都需要
 * 2. 标准化规则：租户代码格式、长度、唯一性等规则相对统一
 * 3. 无业务依赖：不依赖特定业务逻辑，纯粹的数据验证
 * 4. 频繁复用：在多个子领域中被大量使用
 */

import { BaseValueObject, InvalidValueObjectError } from './base.value-object';

/**
 * @class InvalidTenantCodeError
 * @description 租户代码格式错误
 */
export class InvalidTenantCodeError extends InvalidValueObjectError {
  constructor(message: string, value?: string) {
    super(message, 'TenantCode', value);
    this.name = 'InvalidTenantCodeError';
  }
}

/**
 * @class TenantCode
 * @description 租户代码值对象
 *
 * 表示租户代码，具有以下特性：
 * - 不可变性：创建后不能修改
 * - 值相等性：通过值判断相等
 * - 格式验证：确保代码格式正确
 * - 类型安全：强类型约束
 * - 自动生成：支持自动生成代码
 */
export class TenantCode extends BaseValueObject {
  private readonly _value: string;

  /**
   * @constructor
   * @description 创建租户代码值对象
   * @param value 租户代码字符串
   */
  constructor(value: string) {
    super();
    this.validateTenantCode(value);
    this._value = value.toUpperCase(); // 标准化为大写
    this.validateInvariants();
  }

  /**
   * @getter value
   * @description 获取租户代码值
   * @returns {string} 租户代码字符串
   */
  get value(): string {
    return this._value;
  }

  /**
   * @method toString
   * @description 转换为字符串
   * @returns {string} 租户代码字符串
   */
  toString(): string {
    return this._value;
  }

  /**
   * @method equals
   * @description 比较两个租户代码是否相等
   * @param other 另一个租户代码值对象
   * @returns {boolean} 是否相等
   */
  equals(other: unknown): boolean {
    return other instanceof TenantCode && this._value === other._value;
  }

  /**
   * @method toJSON
   * @description 转换为JSON字符串
   * @returns {string} JSON字符串
   */
  toJSON(): string {
    return JSON.stringify({ value: this._value });
  }

  /**
   * @method toObject
   * @description 转换为普通对象
   * @returns {Record<string, unknown>} 普通对象
   */
  toObject(): Record<string, unknown> {
    return { value: this._value };
  }

  /**
   * @method fromJSON
   * @description 从JSON字符串创建租户代码
   * @param json JSON字符串
   * @returns {this} 租户代码值对象
   */
  fromJSON(json: string): this {
    try {
      const data = JSON.parse(json);
      return new TenantCode(data.value) as this;
    } catch (error) {
      throw new InvalidTenantCodeError(`Invalid JSON format: ${json}`, json);
    }
  }

  /**
   * @method clone
   * @description 克隆租户代码
   * @returns {TenantCode} 新的租户代码实例
   */
  clone(): this {
    return new TenantCode(this._value) as this;
  }

  /**
   * @static
   * @method generate
   * @description 生成新的租户代码
   * @param prefix 代码前缀（可选）
   * @returns {TenantCode} 新生成的租户代码
   */
  static generate(prefix?: string): TenantCode {
    const timestamp = Date.now().toString(36);
    const random = Math.random().toString(36).substring(2, 8);
    const code = `${prefix || 'T'}${timestamp}${random}`.toUpperCase();
    return new TenantCode(code);
  }

  /**
   * @static
   * @method generateFromName
   * @description 从租户名称生成代码
   * @param name 租户名称
   * @returns {TenantCode} 生成的租户代码
   */
  static generateFromName(name: string): TenantCode {
    // 提取名称中的字母和数字
    const alphanumeric = name.replace(/[^a-zA-Z0-9]/g, '');

    if (alphanumeric.length === 0) {
      return TenantCode.generate('T');
    }

    // 取前4个字符作为前缀
    const prefix = alphanumeric.substring(0, 4).toUpperCase();
    const timestamp = Date.now().toString(36);
    const random = Math.random().toString(36).substring(2, 6);

    const code = `${prefix}${timestamp}${random}`.toUpperCase();
    return new TenantCode(code);
  }

  /**
   * @method getPrefix
   * @description 获取代码前缀
   * @returns {string} 代码前缀
   */
  getPrefix(): string {
    // 提取字母部分作为前缀
    const match = this._value.match(/^[A-Z]+/);
    return match ? match[0] : '';
  }

  /**
   * @method getSuffix
   * @description 获取代码后缀
   * @returns {string} 代码后缀
   */
  getSuffix(): string {
    const prefix = this.getPrefix();
    return this._value.substring(prefix.length);
  }

  /**
   * @method isAutoGenerated
   * @description 检查是否为自动生成的代码
   * @returns {boolean} 是否为自动生成的代码
   */
  isAutoGenerated(): boolean {
    // 自动生成的代码通常包含时间戳和随机数
    return this._value.length >= 12 && /\d/.test(this._value);
  }

  /**
   * @private
   * @method validateTenantCode
   * @description 验证租户代码格式
   * @param value 租户代码值
   * @throws {InvalidTenantCodeError} 当代码无效时抛出异常
   */
  private validateTenantCode(value: string): void {
    if (!value || typeof value !== 'string') {
      throw new InvalidTenantCodeError(
        'Tenant code must be a non-empty string',
        value,
      );
    }

    const trimmedValue = value.trim();
    if (trimmedValue.length === 0) {
      throw new InvalidTenantCodeError(
        'Tenant code cannot be empty or only whitespace',
        value,
      );
    }

    // 租户代码长度限制：3-20个字符
    if (trimmedValue.length < 3) {
      throw new InvalidTenantCodeError(
        'Tenant code must be at least 3 characters long',
        value,
      );
    }

    if (trimmedValue.length > 20) {
      throw new InvalidTenantCodeError(
        'Tenant code cannot exceed 20 characters',
        value,
      );
    }

    // 租户代码格式验证：只允许字母、数字、连字符、下划线
    const validCodePattern = /^[a-zA-Z0-9\-_]+$/;
    if (!validCodePattern.test(trimmedValue)) {
      throw new InvalidTenantCodeError(
        'Tenant code contains invalid characters. Only letters, numbers, hyphens, and underscores are allowed',
        value,
      );
    }

    // 必须以字母开头
    if (!/^[a-zA-Z]/.test(trimmedValue)) {
      throw new InvalidTenantCodeError(
        'Tenant code must start with a letter',
        value,
      );
    }

    // 不能以连字符或下划线结尾
    if (/[\-_]$/.test(trimmedValue)) {
      throw new InvalidTenantCodeError(
        'Tenant code cannot end with a hyphen or underscore',
        value,
      );
    }

    // 不允许连续的连字符或下划线
    if (/[\-_]{2,}/.test(trimmedValue)) {
      throw new InvalidTenantCodeError(
        'Tenant code cannot contain consecutive hyphens or underscores',
        value,
      );
    }
  }

  /**
   * @protected
   * @method validateInvariants
   * @description 验证值对象不变性条件
   * @throws {InvalidTenantCodeError} 当违反业务规则时抛出
   */
  protected validateInvariants(): void {
    // 确保代码不为空
    if (!this._value || this._value.length === 0) {
      throw new InvalidTenantCodeError(
        'Tenant code cannot be empty after validation',
        this._value,
      );
    }

    // 确保代码长度在有效范围内
    if (this._value.length < 3 || this._value.length > 20) {
      throw new InvalidTenantCodeError(
        'Tenant code length must be between 3 and 20 characters',
        this._value,
      );
    }

    // 确保代码格式正确
    const validCodePattern = /^[A-Z][A-Z0-9\-_]*[A-Z0-9]$/;
    if (!validCodePattern.test(this._value)) {
      throw new InvalidTenantCodeError(
        'Tenant code format is invalid after validation',
        this._value,
      );
    }
  }
}
